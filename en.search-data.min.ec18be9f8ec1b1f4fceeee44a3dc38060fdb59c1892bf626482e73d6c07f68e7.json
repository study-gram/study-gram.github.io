[{"id":0,"href":"/docs/HTTP-%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C/I.-HTTP-%EC%9B%B9%EC%9D%98-%EA%B8%B0%EC%B4%88/01.HTTP-%EA%B0%9C%EA%B4%80/","title":"01. HTTP 개관","section":"I. HTTP 웹의 기초","content":"HTTP 개관 #  1.1 HTTP: 인터넷의 멀티미디어 배달부 #  HTTP란? #   전 세계의 웹 서버로부터 대량의 정보(이미지, HTML 페이지, 텍스트 파일, 동영상 등)를 빠르고, 간편하고, 정확하게 사람들의 PC에 설치된 웹 브라우저로 옮겨준다. 신뢰성 있는 데이터 전송 프로토콜을 사용하므로 데이터가 지구 반대편에서 오더라도 전송 중 손상되거나 꼬이지 않음을 보장한다.  1.2 웹 클라이언트와 서버 #  웹 서버란? #   인터넷의 데이터를 저장하고, HTTP 클라이언트가 요청한 데이터를 제공한다. 웹 서버는 HTTP 프로토콜로 통신하기 때문에 보통 HTTP 서버라고도 불린다. 웹 리소스를 관리하고 제공한다.   웹 클라이언트란? #   서버에게 HTTP 객체를 요청하고 사용자에게 해당 데이터/화면을 보여준다. 보통 사용자가 사용하는 구글 크롬, 인터넷 익스플로러가 웹 클라이언트이다.  1.3 리소스 #  리소스란? #   웹 콘텐츠의 원천이다. 요청에 따라 콘텐츠를 생성하는 프로그램이 될 수 있다. 텍스트파일, HTML파일, 워드 파일, 이미지, 동영상 등 모든 종류의 파일 및 콘텐츠 소스도 포함된다.   미디어타입\n  HTTP 는 수천 개의 데이터 타입을 다루기 때문에 MIME(Multipurpose Internet Mail Extensions, 다목적 인터넷 메일 확장) 라는 데이터 포맷 라벨을 웹에서 전송되는 객체 각각에 붙인다. 즉 이 웹 콘텐츠가 어떤 데이터 타입인지 알려주는 라벨이다. 웹 서버는 모든 HTTP 객체 데이터에 MIME 타입을 붙인다. 표현 형식: \u0026lsquo;주 타입/부 타입\u0026rsquo;  HTML 데이터 타입 = \u0026ldquo;text/html\u0026rdquo; JPEG 이미지 데이터 타입 = \u0026ldquo;image/jpeg\u0026rdquo; GIF 이미지 데이터 타입 = \u0026ldquo;image/gif\u0026rdquo;     URI\n  URI(Uniform Resource Identifier, 통합 자원 식별자)는 서버 리소스 이름이라고도 불린다. 인터넷의 우편물 주소 같은 역할로 정보 리소스를 고유하게 식별하고 위치를 지정할 수 있다.    URL\n  URL(Uniform Resource Locator, 통합 자원 지시자)는 리소스 식별자의 가장 흔한 형태이다. 특정 서버의 한 리소스에 대한 구체적인 위치를 서술한다. 오늘날 대부분 URI는 URL이다. 표현은 세 부분으로 이루어진 표준 포맷을 따른다.  첫 번째, 스킴(Scheme) 이라고 불리며, 리소스에 접근하기 위해 사용되는 프로토콜을 서술한다.(ex: http://) 두 번째, 서버의 인터넷 주소를 제공한다.(ex: www.study-gram.com) 세 번재, 웹 서버의 리소스를 가리킨다.(ex: /images/apple.jpg)     URN\n  URN(Uniform Resource Name, 유니폼 리소스 이름)은 URI 의 두 번재 종류이다. 리소스의 위치에 영향을 받지 않는 유일무이한 이름 역할을 한다.  1.4 트랜잭션 #   트랜잭션은 요청(Request) 명령(클라이언트 -\u0026gt; 서버)과 응답(Response) 결과(서버 -\u0026gt; 클라이언트)로 구성되어 있다.   메소드(method)\n  HTTP 는 HTTP 메서드라고 불리는 여러 가지 종류의 요청 명령을 지원한다. 모든 요청 메세지는 1 개의 메소드를 갖는다.     HTTP 메소드 설명     GET 서버에서 클라이언트로 지정한 리소스를 보내라   PUT 클라이언트에서 서버로 보낸 데이터를 지정한 이름의 리소스를 저장하라   DELETE 지정한 리소스를 서버에서 삭제해라   POST 클라이언트 데이터를 서버 게이트웨이 어플리케이션으로 보내라   HEAD 지정한 리소스에 대한 응답에서, HTTP 헤더 부분만 보내라     상태 코드\n  클라이언트에게 요청이 성공했는지 아니면 추가 조치가 필요한지 알려주는 3자리 숫자이다.(3장에서 상세히 다)     HTTP 상태코드 설명     200 성공   404 리소스를 찾을수 없음   500 서버 에러    1.5 메시지 #   HTTP 메시지는 단순한 줄 단위의 문자열이다. Client -\u0026gt; Server 로 보낸 HTTP 메시지를 요청 메시지라 한다. Server -\u0026gt; Client 로 보낸 HTTP 메시지를 응답 메시지라 한다. 구성은 아래와 같다.  시작줄  요청 및 응답애 대한 내용   헤더  0개 이상의 헤더 필로 구성 쌍점(:)으로 구분되어 하나의 이름과 하나의 값으로 구성 빈 줄로 끝남   본문  어떤 종류의 데이터든 들어갈 수 있는 메시지 본문 요청: 웹 서버로 데이터를 실어보냄 응답: 클라이언트로 데이터 반환 텍스트 이외에 임의의 이진 데이터 포함 가능(이미지, 비디오, 오디오 등)      1.6 TCP 커넥션 #   TCP/IP\n  TCP(Transmission Control Protocol, 전송 제어 프로토콜)  오류 없는 데이터 전송 순서에 맞는 전달(데이터는 언제나 보낸 순서대로 도착) 조각나지 않는 데이터 스트림(언제든 어떤 크기로든 보낼 수 있음)   TCP/IP  패킷 교환 네트워크 프로토콜의 집합 각 네트워크와 하드웨어의 특성을 숨기고, 어떤 종류의 컴퓨터/네트워크든 서로 신뢰성 있는 의사소통을 가능하게 함 일단 TCP 커넥션이 맺어지면, 클라이언트와 서버 컴퓨터 간에 교환되는 메시지가 없어지거나, 손상되거나 하는 일은 없다.     접속, IP 주소 그리고 포트번호\n  HTTP 메시지를 전송하기 위해서는 IP 주소와 포트번호를 사용해 클라이언트와 서버 사이에 TCP/IP 커넥션을 맺어야 함 표현 방식 : \u0026ldquo;IP주소:포트번호\u0026rdquo;(ex: http://127.0.0.1:8080) 클라이언트와 서버 사이의 통신 순서  웹 브라우저는 서버의 URL 에서 호스트 명을 추출 서버의 호스트 명을 IP로 변환 URL에서 포트번호를 추출 웹 서버와 TCP 커넥션을 맺음 클라이언트는 서버에 HTTP 요청을 보냄 서버는 클라이언트에 HTTP 응답을 보냄 커넥션이 닫히면, 웹 브라우저는 문서를 보여줌    1.7 프로토콜 버전 #   HTTP/1.0 : 처음으로 널리 쓰이기 시작한 HTTP 버전 HTTP/1.1 : HTTP 설계의 구조적 결함 교정, 성능 최적화, 잘못된 기능 제거에 집중한 현재의 HTTP 버전 HTTP/2.0 : HTTP/1.1 성능 문제를 개선한 HTTP 버전(10장에서 자세히 다룸)  1.8 웹의 구성요소 #     이름 설명     프락시 클라이언트와 서버 사이에 위치한 HTTP 중개자   캐시 많이 찾는 웹페이지를 클라이언트 가까이에 보관하는 HTTP 창고   게이트웨이 다른 애플리케이션과 연결된 특별한 웹 서버   터널 단순히 HTTP 통신을 전달하기만 하는 특별한 프락시   에이전트 자동화된 HTTP 요청을 만드는 준지능적 웹클라이언트    "},{"id":1,"href":"/docs/HTTP-%EC%99%84%EB%B2%BD%EA%B0%80%EC%9D%B4%EB%93%9C/I.-HTTP-%EC%9B%B9%EC%9D%98-%EA%B8%B0%EC%B4%88/02.URL%EA%B3%BC-%EB%A6%AC%EC%86%8C%EC%8A%A4/","title":"02. Url과 리소스","section":"I. HTTP 웹의 기초","content":"URL과 리소스 #  2.1 인터넷의 리소스 탐색하기 #  URL(Uniform Resource Locator)은 인터넷의 리소스를 가리키는 표준이름이다.\nURL은 전자정보 일부를 가리키고 그것이 어디에 있고 어떻게 접근할 수 있는지 알려준다.\nURL은 브라우저가 정보를 찾는데 필요한 리소스의 위치를 가리킨다.\nURL은 통합 자원 식별자(Uniform Resource Indentifier) 혹은 URI라고 불리는 더 일반화된 부류의 부분집합이다.\nURN(Uniform Resource Name)은 현재 그 리소스가 어디에 존재하든 상관없이 그 이름만으로 리소스를 식별하는데 비해 URL은 리소스가 어디 있느지 설명해서 리소스를 식별한다.\n이 셋의 관계를 그림으로 보면 아래와 같다.\n 참조 및 이미지 - The Real Difference Between a URL and a URI\n다음과 같은 URL이 있다고 할때\nhttps://study.springboot.kr/docs/HTTP-완벽가이드/I.-HTTP-웹의-기초/02.URL과-리소스/\nURL의 첫 부분인 https는 URL의 스킴, URL 두번째 부분인 study.springboot.kr은 서버의 위치이고 URL의 세번째 부분인 /docs/HTTP-완벽가이드/I.-HTTP-웹의-기초/02.URL과-리소스/는 리소스의 경로다.\n각 부분의 역할을 보면\n 스킴(scheme) - 웹 클라이언트가 리소스에 어떻게 접근하는지 알려준다.  ex) https, ftp, rtsp   서버의 위치 - 웹 클라이언트가 리소스가 어디에 호스팅 되어 있는지 알려준다. 리소스의 경로 - 서버에 존재하는 로컬 리소스들 중에서 요청받은 리소스가 무엇인지 알려준다.  아래의 그림을 한번보고 넘어가길 바란다.\n 참조 및 이미지 - What is a URL?\n2.2 URL 문법 #  URL의 문법을 쪼개면 일반적으로 9개의 부분으로 나뉘게 된다\n  참조 및 이미지 - URLs and URIs\n 스킴 사용자 이름 비밀번호 호스트 포트 경로 파라미터 질의 프래그먼트  2.3 단축 URL #  상대 URL은 짧게 표기하는 방식이다.\n상대 URL 문법에 따르면 HTML 작성자는 URL에 스킴과 호스트 그리고 다른 컴포넌트들을 입력하지 않아도 된다.\n예로 현재 사이트에서 다음과 같은 코드를 사용 할 경우\n\u0026lt;img src=\u0026#34;./hi.png\u0026#34;\u0026gt; 기저 URL을 사용해 기술하지 않은 정보를 추측할 수 있다.\n기저 URL을 사용하게 되면 절대 URL은 https://study.springboot.kr/hi.png 가 된다.\n2.4 안전하지 않은 문자 #  다음의 글로 대체 합니다.\n What is URL Encoding and How does it work?\n2.5 스킴의 바다 #  다음의 위키디피아 문서로 대체 합니다.\n List_of_URI_schemes\n"}]